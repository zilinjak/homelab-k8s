
# Source: plex-media-server/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-plex-media-server
  labels:
    name: release-name-plex-media-server
    app: plex-media-server
    helm.sh/chart: plex-media-server-0.8.0
    app.kubernetes.io/name: plex-media-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.41.3"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: release-name-plex-media-server
  selector:
    matchLabels:
      app.kubernetes.io/name: plex-media-server
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app: plex-media-server
        helm.sh/chart: plex-media-server-0.8.0
        app.kubernetes.io/name: plex-media-server
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.41.3"
        app.kubernetes.io/managed-by: Helm
      annotations:
        {}
    spec:
      securityContext:
        runAsUser: 0
        fsGroup: 0
      serviceAccountName: release-name-plex-media-server
      tolerations:
        []
      nodeSelector:
        {}
      affinity:
        {}
      volumes:
      Capabilities:
        APIVersions:
        - v1
        - admissionregistration.k8s.io/v1
        - admissionregistration.k8s.io/v1alpha1
        - admissionregistration.k8s.io/v1beta1
        - internal.apiserver.k8s.io/v1alpha1
        - apps/v1
        - apps/v1beta1
        - apps/v1beta2
        - authentication.k8s.io/v1
        - authentication.k8s.io/v1alpha1
        - authentication.k8s.io/v1beta1
        - authorization.k8s.io/v1
        - authorization.k8s.io/v1beta1
        - autoscaling/v1
        - autoscaling/v2
        - autoscaling/v2beta1
        - autoscaling/v2beta2
        - batch/v1
        - batch/v1beta1
        - certificates.k8s.io/v1
        - certificates.k8s.io/v1beta1
        - certificates.k8s.io/v1alpha1
        - coordination.k8s.io/v1alpha1
        - coordination.k8s.io/v1beta1
        - coordination.k8s.io/v1
        - discovery.k8s.io/v1
        - discovery.k8s.io/v1beta1
        - events.k8s.io/v1
        - events.k8s.io/v1beta1
        - extensions/v1beta1
        - flowcontrol.apiserver.k8s.io/v1
        - flowcontrol.apiserver.k8s.io/v1beta1
        - flowcontrol.apiserver.k8s.io/v1beta2
        - flowcontrol.apiserver.k8s.io/v1beta3
        - networking.k8s.io/v1
        - networking.k8s.io/v1alpha1
        - networking.k8s.io/v1beta1
        - node.k8s.io/v1
        - node.k8s.io/v1alpha1
        - node.k8s.io/v1beta1
        - policy/v1
        - policy/v1beta1
        - rbac.authorization.k8s.io/v1
        - rbac.authorization.k8s.io/v1beta1
        - rbac.authorization.k8s.io/v1alpha1
        - resource.k8s.io/v1alpha3
        - scheduling.k8s.io/v1alpha1
        - scheduling.k8s.io/v1beta1
        - scheduling.k8s.io/v1
        - storage.k8s.io/v1beta1
        - storage.k8s.io/v1
        - storage.k8s.io/v1alpha1
        - storagemigration.k8s.io/v1alpha1
        - apiextensions.k8s.io/v1beta1
        - apiextensions.k8s.io/v1
        HelmVersion:
          git_commit: 7877b45b63f95635153b29a42c0c2f4273ec45ca
          git_tree_state: dirty
          go_version: go1.23.4
          version: v3.16.4
        KubeVersion:
          Major: "1"
          Minor: "31"
          Version: v1.31.0
      Chart:
        IsRoot: true
        apiVersion: v2
        appVersion: 1.41.3
        description: A Helm chart for deploying a PMS server to a Kubernetes cluster
        home: https://www.plex.tv
        icon: https://www.plex.tv/wp-content/themes/plex/assets/img/favicons/plex-152.png
        keywords:
        - plex
        - pms
        - Personal Media Server
        name: plex-media-server
        sources:
        - https://github.com/plexinc/pms-docker
        type: application
        version: 0.8.0
      Files:
        .helmignore: IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqLm9yaWcKKn4KIyBWYXJpb3VzIElERXMKLnByb2plY3QKLmlkZWEvCioudG1wcm9qCi52c2NvZGUvCg==
        LICENSE: 
        README.md: 
        README.md.gotmpl: e3sgdGVtcGxhdGUgImNoYXJ0LmhlYWRlciIgLiB9fQp7eyB0ZW1wbGF0ZSAiY2hhcnQuZGVwcmVjYXRpb25XYXJuaW5nIiAuIH19Cgp7eyB0ZW1wbGF0ZSAiY2hhcnQuYmFkZ2VzU2VjdGlvbiIgLiB9fQoKe3sgdGVtcGxhdGUgImNoYXJ0LmhvbWVwYWdlTGluZSIgLiB9fQoKe3sgdGVtcGxhdGUgImNoYXJ0LmRlc2NyaXB0aW9uIiAuIH19CgoKV2hpbGUgUGxleCBpcyByZXNwb25zaWJsZSBmb3IgbWFpbnRhaW5pbmcgdGhpcyBIZWxtIGNoYXJ0LCB3ZSBjYW5ub3QgcHJvdmlkZSBzdXBwb3J0IGZvciB0cm91Ymxlc2hvb3RpbmcgcmVsYXRlZCB0byBpdHMgdXNhZ2UuIEZvciBjb21tdW5pdHkgYXNzaXN0YW5jZSwgcGxlYXNlIHZpc2l0IG91ciBbc3VwcG9ydCBmb3J1bXNdKGh0dHBzOi8vZm9ydW1zLnBsZXgudHYvKS4KCiMjIyBJbnN0YWxsYXRpb24gdmlhIEhlbG0KCjEuIEFkZCB0aGUgSGVsbSBjaGFydCByZXBvCgpgYGBiYXNoCmhlbG0gcmVwbyBhZGQgcGxleCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGxleGluYy9wbXMtZG9ja2VyL2doLXBhZ2VzCmBgYAoKMi4gSW5zcGVjdCAmIG1vZGlmeSB0aGUgZGVmYXVsdCB2YWx1ZXMgKG9wdGlvbmFsKQoKYGBgYmFzaApoZWxtIHNob3cgdmFsdWVzIHBsZXgvcGxleC1tZWRpYS1zZXJ2ZXIgPiB2YWx1ZXMueWFtbApgYGAKCjMuIEluc3RhbGwgdGhlIGNoYXJ0CgpgYGBiYXNoCmhlbG0gdXBncmFkZSAtLWluc3RhbGwgcGxleCBwbGV4L3BsZXgtbWVkaWEtc2VydmVyIC0tdmFsdWVzIHZhbHVlcy55YW1sCmBgYAoKW0FkZGl0aW9uYWwgZGV0YWlscyBhdmFpbGFibGUgaGVyZV0oaHR0cHM6Ly93d3cucGxleC50di9ibG9nL3BsZXgtcHJvLXdlZWstMjMtYS16LW9uLWs4cy1mb3ItcGxleC1tZWRpYS1zZXJ2ZXIvKQoKIyMjIFNhbXBsZSBpbml0IENvbnRhaW5lciBzY3JpcHRzCgpJZiB5b3UgYWxyZWFkeSBoYXZlIGEgZGlmZmVyZW50IFBNUyBzZXJ2ZXIgcnVubmluZyBlbHNld2hlcmUgYW5kIHdpc2ggdG8gbWlncmF0ZSBpdCB0byBiZSBydW5uaW5nIGluIEt1YmVybmV0ZXMKdGhlIGVhc2llc3Qgd2F5IHRvIGRvIHRoYXQgaXMgdG8gaW1wb3J0IHRoZSBleGlzdGluZyBQTVMgZGF0YWJhc2UgdGhyb3VnaCB0aGUgdXNlIG9mIGEgY3VzdG9tIGluaXQgc2NyaXB0LgoKKipOb3RlOiB0aGUgaW5pdCBzY3JpcHQgbXVzdCBpbmNsdWRlIGEgbWVjaGFuaXNtIHRvIGV4aXQgZWFybHkgaWYgdGhlIHBtcyBkYXRhYmFzZSBhbHJlYWR5IGV4aXN0cyB0byBwcmV2ZW50IGZyb20gb3ZlcndyaXRpbmcgaXRzIGNvbnRlbnRzKioKClRoZSBmb2xsb3dpbmcgc2NyaXB0IGlzIGFuIGV4YW1wbGUgKHVzaW5nIHRoZSBkZWZhdWx0IGBhbHBpbmVgIGluaXQgY29udGFpbmVyKSB0aGF0IHdpbGwgcHVsbAphIHRhciBnemlwZWQgZmlsZSB0aGF0IGNvbnRhaW5zIHRoZSBwbXMgYExpYnJhcnlgIGRpcmVjdG9yeSBmcm9tIHNvbWUgd2ViIHNlcnZlci4KCmBgYHNoCiMhL2Jpbi9zaAplY2hvICJmZXRjaGluZyBwcmUtZXhpc3RpbmcgcG1zIGRhdGFiYXNlIHRvIGltcG9ydC4uLiIKCmlmIFsgLWQgIi9jb25maWcvTGlicmFyeSIgXTsgdGhlbgogIGVjaG8gIlBNUyBsaWJyYXJ5IGFscmVhZHkgZXhpc3RzLCBleGl0aW5nLiIKICBleGl0IDAKZmkKCmFwayAtLW5vLWNhY2hlIGFkZCBjdXJsCmN1cmwgaHR0cDovL2V4YW1wbGUuY29tL3Btcy50Z3ogLW8gcG1zLnRnegp0YXIgLXh2emYgcG1zLnRneiAtQyAvY29uZmlnCnJtIHBtcy50Z3oKCmVjaG8gIkRvbmUuIgpgYGAKClRoaXMgbmV4dCBleGFtcGxlIGNvdWxkIGJlIHVzZWQgaWYgeW91IGRvbid0IGhhdmUgb3IgY2FuJ3QgaG9zdCB0aGUgZXhpc3RpbmcgcG1zIGRhdGFiYXNlIGFyY2hpdmUgb24gYSB3ZWIgc2VydmVyLgpIb3dldmVyLCB0aGlzIG9uZSBfZG9lc18gcmVxdWlyZSB0aGF0IHR3byBjb21tYW5kcyBhcmUgcnVuIG1hbnVhbGx5IG9uY2UgdGhlIGluaXQgY29udGFpbmVyIHN0YXJ0cyB1cC4KCjEuIE1hbnVhbGx5IGNvcHkgdGhlIHBtcyBkYXRhYmFzZSBpbnRvIHRoZSBwb2Q6IGBrdWJlY3RsIGNwIHBtcy50Z3ogPG5hbWVzcGFjZT4vPHBvZG5hbWU+Oi9wbXMudGd6LnVwIC1jIDxyZWxlYXNlIG5hbWU+LXBtcy1jaGFydC1wbXMtaW5pdGAKMi4gT25jZSB0aGUgZmlsZSBpcyB1cGxvYWRlZCBjb3B5IHJlbmFtZSBpdCBvbiB0aGUgcG9kIHRvIHRoZSBjb3JyZWN0IG5hbWUgdGhhdCB3aWxsIGJlIHByb2Nlc3NlZCBga3ViZWN0bCBleGVjIC1uIDxuYW1lc3BhY2U+IC0tc3RkaW4gLS10dHkgPHBvZD4gIC1jIDxyZWxlYXNlIG5hbWU+LXBtcy1jaGFydC1wbXMtaW5pdCBoICAtLSBtdiAvcG1zLnRnei51cCAvcG1zLnRnemAKClRoZSBmaWxlIGlzIGJlaW5nIHVwbG9hZGVkIHdpdGggYSB0ZW1wb3JhcnkgbmFtZSBzbyB0aGF0IHRoZSBzY3JpcHQgZG9lcyBub3Qgc3RhcnQgdHJ5aW5nIHRvIHVucGFjayB0aGUgZGF0YWJhc2UgdW50aWwgaXQgaGFzIGZpbmlzaGVkIHVwbG9hZGluZy4KCmBgYHNoCiMhL2Jpbi9zaAplY2hvICJ3YWl0aW5nIGZvciBwcmUtZXhpc3RpbmcgcG1zIGRhdGFiYXNlIHRvIHVwbG9hZGVkLi4uIgoKaWYgWyAtZCAiL2NvbmZpZy9MaWJyYXJ5IiBdOyB0aGVuCiAgZWNobyAiUE1TIGxpYnJhcnkgYWxyZWFkeSBleGlzdHMsIGV4aXRpbmcuIgogIGV4aXQgMApmaQoKIyB3YWl0IGZvciB0aGUgZGF0YWJhc2UgYXJjaGl2ZSB0byBiZSBtYW51YWxseSBjb3BpZWQgdG8gdGhlIHNlcnZlcgp3aGlsZSBbICEgLWYgL3Btcy50Z3ogXTsgZG8gc2xlZXAgMjsgZG9uZTsKCnRhciAteHZ6ZiAvcG1zLnRneiAtQyAvY29uZmlnCnJtIHBtcy50Z3oKCmVjaG8gIkRvbmUuIgpgYGAKCiMjIENvbnRyaWJ1dGluZwoKQmVmb3JlIGNvbnRyaWJ1dGluZywgcGxlYXNlIHJlYWQgdGhlIFtDb2RlIG9mIENvbmR1Y3RdKC4uLy4uL0NPREVfT0ZfQ09ORFVDVC5tZCkuCgojIyBMaWNlbnNlCgpbR05VIEdQTHYzXSguL0xJQ0VOU0UpCgp7eyB0ZW1wbGF0ZSAiY2hhcnQubWFpbnRhaW5lcnNTZWN0aW9uIiAuIH19Cgp7eyB0ZW1wbGF0ZSAiY2hhcnQuc291cmNlc1NlY3Rpb24iIC4gfX0KCnt7IHRlbXBsYXRlICJjaGFydC5yZXF1aXJlbWVudHNTZWN0aW9uIiAuIH19Cgp7eyB0ZW1wbGF0ZSAiY2hhcnQudmFsdWVzU2VjdGlvbiIgLiB9fQoKe3sgdGVtcGxhdGUgImhlbG0tZG9jcy52ZXJzaW9uRm9vdGVyIiAuIH19Cg==
      Release:
        IsInstall: true
        IsUpgrade: false
        Name: release-name
        Namespace: default
        Revision: 1
        Service: Helm
      Subcharts: {}
      Template:
        BasePath: plex-media-server/templates
        Name: plex-media-server/templates/statefulset.yaml
      Values:
        affinity: {}
        commonLabels: {}
        extraContainers: []
        extraEnv:
          PLEX_CLAIM: claim-i5z_UziXs5edx_6eg-o6
        extraVolumeMounts: []
        extraVolumes: []
        fullnameOverride: ""
        global:
          imageRegistry: ""
        image:
          pullPolicy: IfNotPresent
          registry: index.docker.io
          repository: plexinc/pms-docker
          sha: ""
          tag: latest
        imagePullSecrets: []
        ingress:
          annotations: {}
          certificateSecret: ""
          enabled: false
          ingressClassName: ingress-nginx
          url: ""
        initContainer:
          image:
            pullPolicy: IfNotPresent
            registry: index.docker.io
            repository: alpine
            sha: ""
            tag: 3.18.0
          script: ""
        nameOverride: ""
        nodeSelector: {}
        pms:
          configExistingClaim: ""
          configStorage: 500Gi
          gpu:
            nvidia:
              enabled: false
          livenessProbe: {}
          readinessProbe: {}
          resources: {}
          storageClassName: longhorn-static
        priorityClassName: ""
        publicIngress:
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
          certificateSecret: ""
          enabled: true
          ingressClassName: nginx-external
          url: plex.zilinek.fun
        rclone:
          additionalArgs: []
          configSecret: ""
          enabled: false
          image:
            pullPolicy: IfNotPresent
            registry: index.docker.io
            repository: rclone/rclone
            sha: ""
            tag: 1.62.2
          readOnly: true
          remotes: []
          resources: {}
        runtimeClassName: ""
        service:
          annotations: {}
          port: 32400
          type: ClusterIP
        serviceAccount:
          annotations: {}
          automountServiceAccountToken: false
          create: true
          name: ""
        statefulSet:
          annotations: {}
          podAnnotations: {}
        tolerations: []
        transmission:
          host: transmission.internal.zilinek.fun
          ingressClassName: nginx
  volumeClaimTemplates:
  - metadata:
      name: pms-config
    spec:
      persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn-static
      resources:
        requests:
          storage: 500Gi
  - metadata:
      name: transmission-config
    spec:
      persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn-static
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: transmission-watch
    spec:
      persistentVolumeClaimRetentionPolicy:
        whenDeleted: Retain
        whenScaled: Retain
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: longhorn-static
      resources:
        requests:
          storage: 1Gi
---
# Source: plex-media-server/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-plex-media-server-ingress-external
  labels:
    name: release-name-plex-media-server-ingress
    app: plex-media-server
    helm.sh/chart: plex-media-server-0.8.0
    app.kubernetes.io/name: plex-media-server
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.41.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx-external
  rules:
  - host: plex.zilinek.fun
    http:
      paths:
      - path: '/'
        pathType: Prefix
        backend:
          service:
            name: release-name-plex-media-server
            port:
              number: 32400
  tls:
  - hosts:
    - plex.zilinek.fun
    secretName: release-name-plex-media-server-ingress-lets-encrypt
---
# Source: plex-media-server/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: transmission-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: transmission.internal.zilinek.fun
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: transmission-service
                port:
                  name: web-interface
